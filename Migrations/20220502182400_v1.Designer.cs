// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Migrations
{
    [DbContext(typeof(FuncionarioContext))]
    [Migration("20220502182400_v1")]
    partial class v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Beneficio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NivelID")
                        .HasColumnType("int");

                    b.Property<int?>("TipoBeneficioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NivelID");

                    b.HasIndex("TipoBeneficioId");

                    b.ToTable("Beneficios");
                });

            modelBuilder.Entity("Domain.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("Domain.Deposito", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data")
                        .HasColumnType("Datetime");

                    b.Property<double>("ValorDepositoFuncionario")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Depositos");
                });

            modelBuilder.Entity("Domain.DepositoBeneficio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeneficioId")
                        .HasColumnType("int");

                    b.Property<int?>("FuncionarioId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.Property<DateTime>("Vencimento")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BeneficioId");

                    b.HasIndex("FuncionarioId");

                    b.ToTable("DepositosBeneficios");
                });

            modelBuilder.Entity("Domain.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CEP")
                        .HasColumnType("int");

                    b.Property<string>("Complemento")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Logradouro")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Domain.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Sobrenome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("enderecoId")
                        .HasColumnType("int");

                    b.Property<int?>("modalidadeCargoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("enderecoId");

                    b.HasIndex("modalidadeCargoId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("Domain.ModalidadeCargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CargoID")
                        .HasColumnType("int");

                    b.Property<int?>("ModalidadeContratoID")
                        .HasColumnType("int");

                    b.Property<int?>("NivelID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoID");

                    b.HasIndex("ModalidadeContratoID");

                    b.HasIndex("NivelID");

                    b.ToTable("ModalidadeCargos");
                });

            modelBuilder.Entity("Domain.ModalidadeDeContrato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ModalidadeDeContratos");
                });

            modelBuilder.Entity("Domain.Nivel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NiveisFuncionario");
                });

            modelBuilder.Entity("Domain.TipoBeneficio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Percent")
                        .HasColumnType("real");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("TipoBeneficios");
                });

            modelBuilder.Entity("Domain.Beneficio", b =>
                {
                    b.HasOne("Domain.Nivel", "Nivel")
                        .WithMany("Beneficios")
                        .HasForeignKey("NivelID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.TipoBeneficio", "TipoBeneficio")
                        .WithMany("Beneficios")
                        .HasForeignKey("TipoBeneficioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Nivel");

                    b.Navigation("TipoBeneficio");
                });

            modelBuilder.Entity("Domain.DepositoBeneficio", b =>
                {
                    b.HasOne("Domain.Beneficio", "Beneficio")
                        .WithMany("DepositoBeneficios")
                        .HasForeignKey("BeneficioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Funcionario", "Funcionario")
                        .WithMany("DepositoBeneficios")
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Beneficio");

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("Domain.Funcionario", b =>
                {
                    b.HasOne("Domain.Endereco", "Endereco")
                        .WithMany("Funcionarios")
                        .HasForeignKey("enderecoId");

                    b.HasOne("Domain.ModalidadeCargo", "ModalidadeCargo")
                        .WithMany("Funcionarios")
                        .HasForeignKey("modalidadeCargoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Endereco");

                    b.Navigation("ModalidadeCargo");
                });

            modelBuilder.Entity("Domain.ModalidadeCargo", b =>
                {
                    b.HasOne("Domain.Cargo", "Cargo")
                        .WithMany("ModalidadeCargos")
                        .HasForeignKey("CargoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.ModalidadeDeContrato", "ModalidadeDeContrato")
                        .WithMany("ModalidadeCargos")
                        .HasForeignKey("ModalidadeContratoID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Nivel", "Nivel")
                        .WithMany("ModalidadeCargos")
                        .HasForeignKey("NivelID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cargo");

                    b.Navigation("ModalidadeDeContrato");

                    b.Navigation("Nivel");
                });

            modelBuilder.Entity("Domain.Beneficio", b =>
                {
                    b.Navigation("DepositoBeneficios");
                });

            modelBuilder.Entity("Domain.Cargo", b =>
                {
                    b.Navigation("ModalidadeCargos");
                });

            modelBuilder.Entity("Domain.Endereco", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Domain.Funcionario", b =>
                {
                    b.Navigation("DepositoBeneficios");
                });

            modelBuilder.Entity("Domain.ModalidadeCargo", b =>
                {
                    b.Navigation("Funcionarios");
                });

            modelBuilder.Entity("Domain.ModalidadeDeContrato", b =>
                {
                    b.Navigation("ModalidadeCargos");
                });

            modelBuilder.Entity("Domain.Nivel", b =>
                {
                    b.Navigation("Beneficios");

                    b.Navigation("ModalidadeCargos");
                });

            modelBuilder.Entity("Domain.TipoBeneficio", b =>
                {
                    b.Navigation("Beneficios");
                });
#pragma warning restore 612, 618
        }
    }
}
